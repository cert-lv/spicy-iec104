import iec104;
#import Zeek_iec104;

# TODO: Adjust below how/when the analyzer will be activated. The example
# defines a well-known port to trigger it. For more information, see:
#
#   https://docs.zeek.org/projects/spicy/en/latest/zeek.html#interface-definitions-evt-files
#
#protocol analyzer spicy::iec104 over TCP:
#    parse originator with iec104::Packet,
#    parse responder with iec104::Packet,
#    port 2404/tcp; # adapt port number in main.zeek accordingly

# TODO: Connect Spicy-side events with Zeek-side events. The example just
# defines a simple example event that forwards the raw data (which in practice
# you don't want to do!).
#on iec104::Packet -> event iec104::message($conn, $is_orig, self.payload);

# ========================================================

protocol analyzer spicy::iec104 over TCP:
    parse originator with iec104::Packet,
    parse responder with iec104::Packet,
    parse with iec104::Apcis,
    port 2404/tcp;

# Specify the APCI and APCI modes (U, S, I) parsing for debugging

# I-format APCIs have individual events for each ASDU type.
#
# on iec104::Apci_i ->
#     event iec104::i($conn, self.ssn, self.rsn, self.asdu?);

on iec104::Apci_s ->
    event iec104::s($conn, self.rsn);

on iec104::Apci_u ->
    event iec104::u($conn, self.startdt, self.stopdt, self.testfr);

# For the ASDU parsing

on iec104::Asdu ->
    event iec104::asdu($conn, self.info_obj_type, self.data_unit_identifier.seq, self.data_unit_identifier.num_ix,
                       self.cause_of_transmission.cause_tx, self.cause_of_transmission.negative, self.cause_of_transmission.test,
                       self.originator_address, self.common_address);

on iec104::QOI ->
    event iec104::QOI_evt($conn, iec104::QOI_ret(self));

on iec104::SIQ ->
    event iec104::SIQ_evt($conn, iec104::SIQ_ret(self));

on iec104::SCO ->
    event iec104::SCO_evt($conn, iec104::SCO_ret(self));

on iec104::DCO ->
    event iec104::DCO_evt($conn, iec104::DCO_ret(self));

on iec104::RCO ->
    event iec104::RCO_evt($conn, iec104::RCO_ret(self));

on iec104::BSI ->
    event iec104::BSI_evt($conn, iec104::BSI_ret(self));

on iec104::SVA_QOS ->
    event iec104::SVA_QOS_evt($conn, iec104::SVA_QOS_ret(self));

on iec104::SVA_QDS ->
    event iec104::SVA_QDS_evt($conn, iec104::SVA_QDS_ret(self));

on iec104::IEEE_754_QOS ->
    event iec104::IEEE_754_QOS_evt($conn, iec104::IEEE_754_QOS_ret(self));

on iec104::IEEE_754_QDS ->
    event iec104::IEEE_754_QDS_evt($conn, iec104::IEEE_754_QDS_ret(self));

on iec104::VTI_QDS ->
    event iec104::VTI_QDS_evt($conn, iec104::VTI_QDS_ret(self));

#on iec104::SIQ_CP56Time2a if (iec104::Asdu.info_obj_type == iec104::info_obj_code::M_SP_TB_1) ->
on iec104::SIQ_CP56Time2a ->
    #event iec104::SIQ_CP56Time2a_evt($conn, iec104::Asdu, iec104::SIQ_CP56Time2a_ret(self));
    event iec104::SIQ_CP56Time2a_evt($conn, iec104::SIQ_CP56Time2a_ret(self));

#on iec104::Asdu if (self.info_obj_type == iec104::info_obj_code::M_SP_TB_1) ->
#   event iec104::SIQ_CP56Time2a_evt($conn, iec104::SIQ_CP56Time2a_ret($conn, iec104::SIQ_CP56Time2a));

on iec104::SIQ_CP24Time2a ->
    event iec104::SIQ_CP24Time2a_evt($conn, iec104::SIQ_CP24Time2a_ret(self));

on iec104::DIQ_CP56Time2a ->
    event iec104::DIQ_CP56Time2a_evt($conn, iec104::DIQ_CP56Time2a_ret(self));

on iec104::DIQ_CP24Time2a ->
    event iec104::DIQ_CP24Time2a_evt($conn, iec104::DIQ_CP24Time2a_ret(self));

on iec104::VTI_QDS_CP56Time2a ->
    event iec104::VTI_QDS_CP56Time2a_evt($conn, iec104::VTI_QDS_CP56Time2a_ret(self));

on iec104::VTI_QDS_CP24Time2a ->
    event iec104::VTI_QDS_CP24Time2a_evt($conn, iec104::VTI_QDS_CP24Time2a_ret(self));

on iec104::BSI_QDS ->
    event iec104::BSI_QDS_evt($conn, iec104::BSI_QDS_ret(self));

on iec104::BSI_QDS_CP56Time2a ->
    event iec104::BSI_QDS_CP56Time2a_evt($conn, iec104::BSI_QDS_CP56Time2a_ret(self));

on iec104::BSI_QDS_CP24Time2a ->
    event iec104::BSI_QDS_CP24Time2a_evt($conn, iec104::BSI_QDS_CP24Time2a_ret(self));

on iec104::COI ->
    event iec104::COI_evt($conn, iec104::COI_ret(self));

on iec104::NVA_QDS_CP56Time2a ->
    event iec104::NVA_QDS_CP56Time2a_evt($conn, iec104::NVA_QDS_CP56Time2a_ret(self));

on iec104::NVA_QDS_CP24Time2a ->
    event iec104::NVA_QDS_CP24Time2a_evt($conn, iec104::NVA_QDS_CP24Time2a_ret(self));

on iec104::SVA_QDS_CP56Time2a ->
    event iec104::SVA_QDS_CP56Time2a_evt($conn, iec104::SVA_QDS_CP56Time2a_ret(self));

on iec104::SVA_QDS_CP24Time2a ->
    event iec104::SVA_QDS_CP24Time2a_evt($conn, iec104::SVA_QDS_CP24Time2a_ret(self));

on iec104::IEEE_754_QDS_CP56Time2a ->
    event iec104::IEEE_754_QDS_CP56Time2a_evt($conn, iec104::IEEE_754_QDS_CP56Time2a_ret(self));

on iec104::IEEE_754_QDS_CP24Time2a ->
    event iec104::IEEE_754_QDS_CP24Time2a_evt($conn, iec104::IEEE_754_QDS_CP24Time2a_ret(self));

on iec104::Read_Command ->
    event iec104::Read_Command_evt($conn, iec104::Read_Command_ret(self));

on iec104::QRP ->
    event iec104::QRP_evt($conn, iec104::QRP_ret(self));
