import iec104;
#import Zeek_iec104;

# TODO: Adjust below how/when the analyzer will be activated. The example
# defines a well-known port to trigger it. For more information, see:
#
#   https://docs.zeek.org/projects/spicy/en/latest/zeek.html#interface-definitions-evt-files
#
#protocol analyzer spicy::iec104 over TCP:
#    parse originator with iec104::Packet,
#    parse responder with iec104::Packet,
#    port 2404/tcp; # adapt port number in main.zeek accordingly

# TODO: Connect Spicy-side events with Zeek-side events. The example just
# defines a simple example event that forwards the raw data (which in practice
# you don't want to do!).
#on iec104::Packet -> event iec104::message($conn, $is_orig, self.payload);

# ========================================================

protocol analyzer spicy::iec104 over TCP:
    parse originator with iec104::Packet,
    parse responder with iec104::Packet,
    parse with iec104::Apdus,
    port 2404/tcp;

export iec104::COT;
export iec104::TypeID;

# I-format APCIs have individual events for each ASDU type.
#
# on iec104::Apci_i ->
#     event iec104::i($conn, self.ssn, self.rsn, self.asdu?);

on iec104::Apdu if (self.format == iec104::Format::S) ->
    event iec104::s($conn, $is_orig, self.ctrl_s.rsn);

on iec104::Apdu if (self.format == iec104::Format::U)->
    event iec104::u($conn, $is_orig, self.ctrl_u.startdt, self.ctrl_u.stopdt, self.ctrl_u.testfr);

# For the ASDU parsing

on iec104::AsduIdent ->
    event iec104::asdu($conn, self.type_id, self.sq, self.nobj,
                       self.cause_of_transmission, self.negative, self.test,
                       self.originator_address, self.common_address);

on iec104::M_SP_NA_1_io ->
    event iec104::M_SP_NA_1($conn, $is_orig, iec104::M_SP_NA_1_rec(self));

on iec104::M_SP_TA_1_io ->
    event iec104::M_SP_TA_1($conn, $is_orig, iec104::M_SP_TA_1_rec(self));

on iec104::M_DP_NA_1_io ->
    event iec104::M_DP_NA_1($conn, $is_orig, iec104::M_DP_NA_1_rec(self));

on iec104::M_DP_TA_1_io ->
    event iec104::M_DP_TA_1($conn, $is_orig, iec104::M_DP_TA_1_rec(self));

on iec104::M_ST_NA_1_io ->
    event iec104::M_ST_NA_1($conn, $is_orig, iec104::M_ST_NA_1_rec(self));

on iec104::M_ST_TA_1_io ->
    event iec104::M_ST_TA_1($conn, $is_orig, iec104::M_ST_TA_1_rec(self));

on iec104::M_BO_NA_1_io ->
    event iec104::M_BO_NA_1($conn, $is_orig, iec104::M_BO_NA_1_rec(self));

on iec104::M_BO_TA_1_io ->
    event iec104::M_BO_TA_1($conn, $is_orig, iec104::M_BO_TA_1_rec(self));

on iec104::M_ME_NC_1_io ->
    event iec104::M_ME_NC_1($conn, $is_orig, iec104::M_ME_NC_1_rec(self));

on iec104::M_SP_TB_1_io ->
    event iec104::M_SP_TB_1($conn, $is_orig, iec104::M_SP_TB_1_rec(self));

on iec104::M_DP_TB_1_io ->
    event iec104::M_DP_TB_1($conn, $is_orig, iec104::M_DP_TB_1_rec(self));

on iec104::M_ST_TB_1_io ->
    event iec104::M_ST_TB_1($conn, $is_orig, iec104::M_ST_TB_1_rec(self));

on iec104::C_IC_NA_1_io ->
    event iec104::C_IC_NA_1($conn, $is_orig, iec104::C_IC_NA_1_rec(self));

on iec104::C_SC_NA_1_io ->
    event iec104::C_SC_NA_1($conn, $is_orig, iec104::C_SC_NA_1_rec(self));

on iec104::C_DC_NA_1_io ->
    event iec104::C_DC_NA_1($conn, $is_orig, iec104::C_DC_NA_1_rec(self));

on iec104::C_RC_NA_1_io ->
    event iec104::C_RC_NA_1($conn, $is_orig, iec104::C_RC_NA_1_rec(self));

on iec104::C_SE_NA_1_io ->
    event iec104::C_SE_NA_1($conn, $is_orig, iec104::C_SE_NA_1_rec(self));

on iec104::C_SE_NB_1_io ->
    event iec104::C_SE_NB_1($conn, $is_orig, iec104::C_SE_NB_1_rec(self));

on iec104::C_SE_NC_1_io ->
    event iec104::C_SE_NC_1($conn, $is_orig, iec104::C_SE_NC_1_rec(self));

on iec104::C_BO_NA_1_io ->
    event iec104::C_BO_NA_1($conn, $is_orig, iec104::C_BO_NA_1_rec(self));

on iec104::C_SC_TA_1_io ->
    event iec104::C_SC_TA_1($conn, $is_orig, iec104::C_SC_TA_1_rec(self));

on iec104::C_DC_TA_1_io ->
    event iec104::C_DC_TA_1($conn, $is_orig, iec104::C_DC_TA_1_rec(self));

on iec104::C_RC_TA_1_io ->
    event iec104::C_RC_TA_1($conn, $is_orig, iec104::C_RC_TA_1_rec(self));

on iec104::C_SE_TA_1_io ->
    event iec104::C_SE_TA_1($conn, $is_orig, iec104::C_SE_TA_1_rec(self));

on iec104::C_SE_TC_1_io ->
    event iec104::C_SE_TC_1($conn, $is_orig, iec104::C_SE_TC_1_rec(self));

on iec104::C_BO_TA_1_io ->
    event iec104::C_BO_TA_1($conn, $is_orig, iec104::C_BO_TA_1_rec(self));

on iec104::M_EI_NA_1_io ->
    event iec104::M_EI_NA_1($conn, $is_orig, iec104::M_EI_NA_1_rec(self));

on iec104::SVA_QDS ->
    event iec104::SVA_QDS_evt($conn, iec104::SVA_QDS_ret(self));

on iec104::BSI_QDS_CP56Time2a ->
    event iec104::BSI_QDS_CP56Time2a_evt($conn, iec104::BSI_QDS_CP56Time2a_ret(self));

on iec104::NVA_QDS_CP56Time2a ->
    event iec104::NVA_QDS_CP56Time2a_evt($conn, iec104::NVA_QDS_CP56Time2a_ret(self));

on iec104::NVA_QDS_CP24Time2a ->
    event iec104::NVA_QDS_CP24Time2a_evt($conn, iec104::NVA_QDS_CP24Time2a_ret(self));

on iec104::SVA_QDS_CP56Time2a ->
    event iec104::SVA_QDS_CP56Time2a_evt($conn, iec104::SVA_QDS_CP56Time2a_ret(self));

on iec104::SVA_QDS_CP24Time2a ->
    event iec104::SVA_QDS_CP24Time2a_evt($conn, iec104::SVA_QDS_CP24Time2a_ret(self));

on iec104::IEEE_754_QDS_CP56Time2a ->
    event iec104::IEEE_754_QDS_CP56Time2a_evt(
        $conn,
        $is_orig,
        self.info_obj_addr,
        self.value,
        self.qds,
        self.btt);

on iec104::IEEE_754_QDS_CP24Time2a ->
    event iec104::IEEE_754_QDS_CP24Time2a_evt($conn, iec104::IEEE_754_QDS_CP24Time2a_ret(self));

on iec104::Read_Command ->
    event iec104::Read_Command_evt($conn, iec104::Read_Command_ret(self));

on iec104::QRP ->
    event iec104::QRP_evt($conn, iec104::QRP_ret(self));

on iec104::Raw ->
    event iec104::Unknown_ASDU($conn, $is_orig, self.type_id, self.data);
