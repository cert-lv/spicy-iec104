module iec104;

import spicy;


%byte-order = spicy::ByteOrder::Little;

# Not used for parsing.
public type Format = enum {
    I = 0,
    S = 1,
    U = 3
};

public type TypeID = enum {
    ASDU_TYPEUNDEF =   0, # Not allowed
    M_SP_NA_1      =   1, # Single-point information
    M_SP_TA_1      =   2, # Single-point information with time tag
    M_DP_NA_1      =   3, # Double-point information
    M_DP_TA_1      =   4, # Double-point information with time tag
    M_ST_NA_1      =   5, # Step position information
    M_ST_TA_1      =   6, # Step position information with time tag
    M_BO_NA_1      =   7, # Bitstring of 32 bit
    M_BO_TA_1      =   8, # Bitstring of 32 bit with time tag
    M_ME_NA_1      =   9, # Measured value, normalised value
    M_ME_TA_1      =  10, # Measured value, normalized value with time tag
    M_ME_NB_1      =  11, # Measured value, scaled value
    M_ME_TB_1      =  12, # Measured value, scaled value wit time tag
    M_ME_NC_1      =  13, # Measured value, short floating point number
    M_ME_TC_1      =  14, # Measured value, short floating point number with time tag
    M_IT_NA_1      =  15, # Integrated totals
    M_IT_TA_1      =  16, # Integrated totals with time tag
    M_EP_TA_1      =  17, # Event of protection equipment with time tag
    M_EP_TB_1      =  18, # Packed start events of protection equipment with time tag
    M_EP_TC_1      =  19, # Packed output circuit information of protection equipment with time tag
    M_PS_NA_1      =  20, # Packed single point information with status change detection
    M_ME_ND_1      =  21, # Measured value, normalized value without quality descriptor
    ASDU_TYPE_22   =  22,
    ASDU_TYPE_23   =  23,
    ASDU_TYPE_24   =  24,
    ASDU_TYPE_25   =  25,
    ASDU_TYPE_26   =  26,
    ASDU_TYPE_27   =  27,
    ASDU_TYPE_28   =  28,
    ASDU_TYPE_29   =  29,
    M_SP_TB_1      =  30, # Single-point information with time tag CP56Time2a
    M_DP_TB_1      =  31, # Double-point information with time tag CP56Time2a
    M_ST_TB_1      =  32, # Step position information with time tag CP56Time2a
    M_BO_TB_1      =  33, # Bitstring of 32 bit with time tag CP56Time2a
    M_ME_TD_1      =  34, # Measured value, normalised value with time tag CP56Time2a
    M_ME_TE_1      =  35, # Measured value, scaled value with time tag CP56Time2a
    M_ME_TF_1      =  36, # Measured value, short floating point number with time tag CP56Time2a
    M_IT_TB_1      =  37, # Integrated totals with time tag CP56Time2a
    M_EP_TD_1      =  38, # Event of protection equipment with time tag CP56Time2a
    M_EP_TE_1      =  39, # Packed start events of protection equipment with time tag CP56Time2a
    M_EP_TF_1      =  40, # Packed output circuit information of protection equipment with time tag CP56Time2a
    ASDU_TYPE_41   =  41,
    ASDU_TYPE_42   =  42,
    ASDU_TYPE_43   =  43,
    ASDU_TYPE_44   =  44,
    C_SC_NA_1      =  45, # Single command
    C_DC_NA_1      =  46, # Double command
    C_RC_NA_1      =  47, # Regulating step command
    C_SE_NA_1      =  48, # Set-point Command, normalised value
    C_SE_NB_1      =  49, # Set-point Command, scaled value
    C_SE_NC_1      =  50, # Set-point Command, short floating point number
    C_BO_NA_1      =  51, # Bitstring 32 bit command
    ASDU_TYPE_52   =  52,
    ASDU_TYPE_53   =  53,
    ASDU_TYPE_54   =  54,
    ASDU_TYPE_55   =  55,
    ASDU_TYPE_56   =  56,
    ASDU_TYPE_57   =  57,
    C_SC_TA_1      =  58, # Single command with time tag CP56Time2a
    C_DC_TA_1      =  59, # Double command with time tag CP56Time2a
    C_RC_TA_1      =  60, # Regulating step command with time tag CP56Time2a
    C_SE_TA_1      =  61, # Measured value, normalised value command with time tag CP56Time2a
    C_SE_TB_1      =  62, # Measured value, scaled value command with time tag CP56Time2a
    C_SE_TC_1      =  63, # Measured value, short floating point number command with time tag CP56Time2a
    C_BO_TA_1      =  64, # Bitstring of 32 bit command with time tag CP56Time2a
    ASDU_TYPE_65   =  65,
    ASDU_TYPE_66   =  66,
    ASDU_TYPE_67   =  67,
    ASDU_TYPE_68   =  68,
    ASDU_TYPE_69   =  69,
    M_EI_NA_1      =  70, # End of Initialisation
    ASDU_TYPE_71   =  71,
    ASDU_TYPE_72   =  72,
    ASDU_TYPE_73   =  73,
    ASDU_TYPE_74   =  74,
    ASDU_TYPE_75   =  75,
    ASDU_TYPE_76   =  76,
    ASDU_TYPE_77   =  77,
    ASDU_TYPE_78   =  78,
    ASDU_TYPE_79   =  79,
    ASDU_TYPE_80   =  80,
    ASDU_TYPE_81   =  81,
    ASDU_TYPE_82   =  82,
    ASDU_TYPE_83   =  83,
    ASDU_TYPE_84   =  84,
    ASDU_TYPE_85   =  85,
    ASDU_TYPE_86   =  86,
    ASDU_TYPE_87   =  87,
    ASDU_TYPE_88   =  88,
    ASDU_TYPE_89   =  89,
    ASDU_TYPE_90   =  90,
    ASDU_TYPE_91   =  91,
    ASDU_TYPE_92   =  92,
    ASDU_TYPE_93   =  93,
    ASDU_TYPE_94   =  94,
    ASDU_TYPE_95   =  95,
    ASDU_TYPE_96   =  96,
    ASDU_TYPE_97   =  97,
    ASDU_TYPE_98   =  98,
    ASDU_TYPE_99   =  99,
    C_IC_NA_1      = 100, # Interrogation command
    C_CI_NA_1      = 101, # Counter interrogation command
    C_RD_NA_1      = 102, # Read Command
    C_CS_NA_1      = 103, # Clock synchronisation command
    C_TS_NA_1      = 104, # Test command
    C_RP_NA_1      = 105, # Reset process command
    C_CD_NA_1      = 106, # C_CD_NA_1 Delay acquisition command
    C_TS_TA_1      = 107, # Test command with time tag CP56Time2a
    ASDU_TYPE_108  = 108,
    ASDU_TYPE_109  = 109,
    P_ME_NA_1      = 110, # Parameter of measured values, normalized value
    P_ME_NB_1      = 111, # Parameter of measured values, scaled value
    P_ME_NC_1      = 112, # Parameter of measured values, short floating point number
    P_AC_NA_1      = 113, # Parameter activation
    ASDU_TYPE_114  = 114,
    ASDU_TYPE_115  = 115,
    ASDU_TYPE_116  = 116,
    ASDU_TYPE_117  = 117,
    ASDU_TYPE_118  = 118,
    ASDU_TYPE_119  = 119,
    F_FR_NA_1      = 120, # File ready
    F_SR_NA_1      = 121, # Section ready
    F_SC_NA_1      = 122, # Call directory, select file, call file, call section
    F_LS_NA_1      = 123, # Last section, last segment
    F_AF_NA_1      = 124, # ACK file, ACK section
    F_SG_NA_1      = 125, # Segment
    F_DR_TA_1      = 126, # Directory
    F_SC_NB_1      = 127, # QueryLog - request archive file

    # Reserved user ASDU types.
    ASDU_TYPE_128  = 128,
    ASDU_TYPE_129  = 129,
    ASDU_TYPE_130  = 130,
    ASDU_TYPE_131  = 131,
    ASDU_TYPE_132  = 132,
    ASDU_TYPE_133  = 133,
    ASDU_TYPE_134  = 134,
    ASDU_TYPE_135  = 135,
    ASDU_TYPE_136  = 136,
    ASDU_TYPE_137  = 137,
    ASDU_TYPE_138  = 138,
    ASDU_TYPE_139  = 139,
    ASDU_TYPE_140  = 140,
    ASDU_TYPE_141  = 141,
    ASDU_TYPE_142  = 142,
    ASDU_TYPE_143  = 143,
    ASDU_TYPE_144  = 144,
    ASDU_TYPE_145  = 145,
    ASDU_TYPE_146  = 146,
    ASDU_TYPE_147  = 147,
    ASDU_TYPE_148  = 148,
    ASDU_TYPE_149  = 149,
    ASDU_TYPE_150  = 150,
    ASDU_TYPE_151  = 151,
    ASDU_TYPE_152  = 152,
    ASDU_TYPE_153  = 153,
    ASDU_TYPE_154  = 154,
    ASDU_TYPE_155  = 155,
    ASDU_TYPE_156  = 156,
    ASDU_TYPE_157  = 157,
    ASDU_TYPE_158  = 158,
    ASDU_TYPE_159  = 159,
    ASDU_TYPE_160  = 160,
    ASDU_TYPE_161  = 161,
    ASDU_TYPE_162  = 162,
    ASDU_TYPE_163  = 163,
    ASDU_TYPE_164  = 164,
    ASDU_TYPE_165  = 165,
    ASDU_TYPE_166  = 166,
    ASDU_TYPE_167  = 167,
    ASDU_TYPE_168  = 168,
    ASDU_TYPE_169  = 169,
    ASDU_TYPE_170  = 170,
    ASDU_TYPE_171  = 171,
    ASDU_TYPE_172  = 172,
    ASDU_TYPE_173  = 173,
    ASDU_TYPE_174  = 174,
    ASDU_TYPE_175  = 175,
    ASDU_TYPE_176  = 176,
    ASDU_TYPE_177  = 177,
    ASDU_TYPE_178  = 178,
    ASDU_TYPE_179  = 179,
    ASDU_TYPE_180  = 180,
    ASDU_TYPE_181  = 181,
    ASDU_TYPE_182  = 182,
    ASDU_TYPE_183  = 183,
    ASDU_TYPE_184  = 184,
    ASDU_TYPE_185  = 185,
    ASDU_TYPE_186  = 186,
    ASDU_TYPE_187  = 187,
    ASDU_TYPE_188  = 188,
    ASDU_TYPE_189  = 189,
    ASDU_TYPE_190  = 190,
    ASDU_TYPE_191  = 191,
    ASDU_TYPE_192  = 192,
    ASDU_TYPE_193  = 193,
    ASDU_TYPE_194  = 194,
    ASDU_TYPE_195  = 195,
    ASDU_TYPE_196  = 196,
    ASDU_TYPE_197  = 197,
    ASDU_TYPE_198  = 198,
    ASDU_TYPE_199  = 199,
    ASDU_TYPE_200  = 200,
    ASDU_TYPE_201  = 201,
    ASDU_TYPE_202  = 202,
    ASDU_TYPE_203  = 203,
    ASDU_TYPE_204  = 204,
    ASDU_TYPE_205  = 205,
    ASDU_TYPE_206  = 206,
    ASDU_TYPE_207  = 207,
    ASDU_TYPE_208  = 208,
    ASDU_TYPE_209  = 209,
    ASDU_TYPE_210  = 210,
    ASDU_TYPE_211  = 211,
    ASDU_TYPE_212  = 212,
    ASDU_TYPE_213  = 213,
    ASDU_TYPE_214  = 214,
    ASDU_TYPE_215  = 215,
    ASDU_TYPE_216  = 216,
    ASDU_TYPE_217  = 217,
    ASDU_TYPE_218  = 218,
    ASDU_TYPE_219  = 219,
    ASDU_TYPE_220  = 220,
    ASDU_TYPE_221  = 221,
    ASDU_TYPE_222  = 222,
    ASDU_TYPE_223  = 223,
    ASDU_TYPE_224  = 224,
    ASDU_TYPE_225  = 225,
    ASDU_TYPE_226  = 226,
    ASDU_TYPE_227  = 227,
    ASDU_TYPE_228  = 228,
    ASDU_TYPE_229  = 229,
    ASDU_TYPE_230  = 230,
    ASDU_TYPE_231  = 231,
    ASDU_TYPE_232  = 232,
    ASDU_TYPE_233  = 233,
    ASDU_TYPE_234  = 234,
    ASDU_TYPE_235  = 235,
    ASDU_TYPE_236  = 236,
    ASDU_TYPE_237  = 237,
    ASDU_TYPE_238  = 238,
    ASDU_TYPE_239  = 239,
    ASDU_TYPE_240  = 240,
    ASDU_TYPE_241  = 241,
    ASDU_TYPE_242  = 242,
    ASDU_TYPE_243  = 243,
    ASDU_TYPE_244  = 244,
    ASDU_TYPE_245  = 245,
    ASDU_TYPE_246  = 246,
    ASDU_TYPE_247  = 247,
    ASDU_TYPE_248  = 248,
    ASDU_TYPE_249  = 249,
    ASDU_TYPE_250  = 250,
    ASDU_TYPE_251  = 251,
    ASDU_TYPE_252  = 252,
    ASDU_TYPE_253  = 253,
    ASDU_TYPE_254  = 254,
    ASDU_TYPE_255  = 255
};

public type COT = enum {
    Cot_Unused  =  0, # Is not used
    Percyc      =  1, # Cyclic data
    Back        =  2, # Background scan
    Spont       =  3, # Spontaneous data
    Init        =  4, # End of initialization
    Req         =  5, # Read request
    Act         =  6, # Command activation
    Actcon      =  7, # Confirmation of command activation
    Deact       =  8, # Command abortion
    Deactcon    =  9, # Confirmation of command abortion
    ActTerm     = 10, # Termination of command activation
    Retrem      = 11, # Response due to remote command
    Retloc      = 12, # Response due to local command
    File        = 13, # File access
    Auth        = 14, # Authentication
    Seskey      = 15, # Authentication session key maintenance
    Usrkey      = 16, # User role and update key maintenance
    Cot_17      = 17,
    Cot_18      = 18,
    Cot_19      = 19,
    Inrogen     = 20, # Station interrogation (general)
    Inro1       = 21, # Station interrogation for group 1
    Inro2       = 22, # Station interrogation for group 2
    Inro3       = 23, # Station interrogation for group 3
    Inro4       = 24, # Station interrogation for group 4
    Inro5       = 25, # Station interrogation for group 5
    Inro6       = 26, # Station interrogation for group 6
    Inro7       = 27, # Station interrogation for group 7
    Inro8       = 28, # Station interrogation for group 8
    Inro9       = 29, # Station interrogation for group 9
    Inro10      = 30, # Station interrogation for group 10
    Inro11      = 31, # Station interrogation for group 11
    Inro12      = 32, # Station interrogation for group 12
    Inro13      = 33, # Station interrogation for group 13
    Inro14      = 34, # Station interrogation for group 14
    Inro15      = 35, # Station interrogation for group 15
    Inro16      = 36, # Station interrogation for group 16
    Reqcogen    = 37, # Counter interrogation (general)
    Reqco1      = 38, # Counter interrogation for group 1
    Reqco2      = 39, # Counter interrogation for group 2
    Reqco3      = 40, # Counter interrogation for group 3
    Reqco4      = 41, # Counter interrogation for group 4
    Cot_42      = 42,
    Cot_43      = 43,
    UnkType     = 44, # Unknown type
    UnkCause    = 45, # Unknown cause of transfer
    UnkAsduAddr = 46, # Unknown common ASDU address
    UnkObjAddr  = 47, # Unknown object address
    Cot_48      = 48,
    Cot_49      = 49,
    Cot_50      = 50,
    Cot_51      = 51,
    Cot_52      = 52,
    Cot_53      = 53,
    Cot_54      = 54,
    Cot_55      = 55,
    Cot_56      = 56,
    Cot_57      = 57,
    Cot_58      = 58,
    Cot_59      = 59,
    Cot_60      = 60,
    Cot_61      = 61,
    Cot_62      = 62,
    Cot_63      = 63
};

type SIQ = unit {
    : bitfield(8) {
        spi: 0;
        # : 1..3 = 0;
        bl: 4;
        sb: 5;
        nt: 6;
        iv: 7;
    };
};

type DIQ = unit {
    : bitfield(8) {
        dpi: 0..1;
        # : 2..3 = 0;
        bl: 4;
        sb: 5;
        nt: 6;
        iv: 7;
    };
};

type QDS = unit {
    : bitfield(8) {
        ov: 0;
        # : 1..3 = 0;
        bl: 4;
        sb: 5;
        nt: 6;
        iv: 7;
    };
};

type CP24Time2a = unit {
    ms: uint16;
    : bitfield(8) {
        minute: 0..5;
        # : 6 = 0;
        iv: 7;
    };
};

type CP56Time2a = unit {
    ms: uint16;
    : bitfield(8) {
        minute: 0..5;
        # : 6 = 0;
        iv: 7;
    };
    : bitfield(8) {
        hour: 0..4;
        # : 5..6 = 0;
        su: 7;
    };
    : bitfield(8) {
        day: 0..4;
        dow: 5..7;
    };
    : bitfield(8) {
        month: 0..3;
        # : 4..7 = 0;
    };
    : bitfield(8) {
        year: 0..6;
        # : 7 = 0;
    };
};

type M_SP_NA_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    siq: SIQ;
};

type M_SP_TA_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    siq: SIQ;
    tt: CP24Time2a;
};

type M_DP_NA_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    diq: DIQ;
};

type M_DP_TA_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    diq: DIQ;
    tt: CP24Time2a;
};

type M_ST_NA_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    vti: uint8;
    qds: QDS;
};

type M_ST_TA_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    vti: uint8;
    qds: QDS;
    tt: CP24Time2a;
};

type M_DP_TB_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    diq: DIQ;
    tt: CP56Time2a;
};

type M_ME_NC_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    r32: real &type=spicy::RealType::IEEE754_Single;
    qds: QDS;
};

type M_SP_TB_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    siq: SIQ;
    tt: CP56Time2a;
};

type C_IC_NA_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    qoi: uint8;
};

type C_SC_NA_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    sco: bitfield(8) {
        scs: 0;
        # : 1 = 0;
        qu: 2..6;
        se: 7;
    };
};

type C_DC_NA_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    dco: bitfield(8) {
        dcs: 0..1;
        qu: 2..6;
        se: 7;
    };
};

type C_RC_NA_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    rco: bitfield(8) {
        rcs: 0..1;
        qu: 2..6;
        se: 7;
    };
};

type C_SE_NA_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    nva: uint16;
    qos: bitfield(8) {
        ql: 0..6;
        se: 7;
    };
};

type C_SE_NB_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    sva: uint16;
    qos: bitfield(8) {
        ql: 0..6;
        se: 7;
    };
};

type C_SE_NC_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    r32: real &type=spicy::RealType::IEEE754_Single;
    qos: bitfield(8) {
        ql: 0..6;
        se: 7;
    };
};

type C_BO_NA_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    bsi: uint32;
};

type C_SC_TA_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    sco: bitfield(8) {
        scs: 0;
        # : 1 = 0;
        qu: 2..6;
        se: 7;
    };
    tt: CP56Time2a;
};

type C_DC_TA_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    dco: bitfield(8) {
        dcs: 0..1;
        qu: 2..6;
        se: 7;
    };
    tt: CP56Time2a;
};

type C_RC_TA_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    rco: bitfield(8) {
        rcs: 0..1;
        qu: 2..6;
        se: 7;
    };
    tt: CP56Time2a;
};

type C_SE_TA_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    nva: uint16;
    qos: bitfield(8) {
        ql: 0..6;
        se: 7;
    };
    tt: CP56Time2a;
};

type C_SE_TC_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    r32: real &type=spicy::RealType::IEEE754_Single;
    qos: bitfield(8) {
        ql: 0..6;
        se: 7;
    };
    tt: CP56Time2a;
};

type C_BO_TA_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    bsi: uint32;
    tt: CP56Time2a;
};

type M_EI_NA_1_io = unit {
    obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    : bitfield(8) {
        coi: 0..6;
        lpc: 7;
    };
};

type NVA_QDS = unit {
    info_obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    NVA: uint16;
    qds: bitfield(8) {
        ov: 0;
        bl: 4;
        sb: 5;
        nt: 6;
        iv: 7;
    };
};

type BSI_QDS = unit {
    info_obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    bsi: uint32;
    qds: bitfield(8) {
        ov: 0;
        bl: 4;
        sb: 5;
        nt: 6;
        iv: 7;
    };
};

type SVA_QDS = unit {
    info_obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    SVA: uint16;
    qds: bitfield(8) {
        ov: 0;
        bl: 4;
        sb: 5;
        nt: 6;
        iv: 7;
    };
};

type CP56TIME2A = unit {
    milli: uint16;
    #minute: uint8;
    minute: bitfield(8) {
        mins: 0..6;
        iv: 7;
    };
    #hour: uint8;
    hour: bitfield(8) {
        hours: 0..6;
        su: 7;
    };
    #day: uint8;
    day_dow: bitfield(8) {
        day: 0..4;
        day_of_week: 5..7;
    };
    mon: uint8;
    year: uint8;
};

type CP24TIME2A = unit {
    milli: uint16;
    minute: bitfield(8) {
        mins: 0..6;
        iv: 7;
    };
};

type VTI_QDS_CP56Time2a = unit {
    info_obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    value: uint8;
    qds: bitfield(8) {
        ov: 0;
        bl: 4;
        sb: 5;
        nt: 6;
        iv: 7;
    };
    CP56Time2a: CP56TIME2A;
};

type BSI_QDS_CP56Time2a = unit {
    info_obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    bsi: uint32;
    qds: bitfield(8) {
        ov: 0;
        bl: 4;
        sb: 5;
        nt: 6;
        iv: 7;
    };
    CP56Time2a: CP56TIME2A;
};

type BSI_QDS_CP24Time2a = unit {
    info_obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    bsi: uint32;
    qds: bitfield(8) {
        ov: 0;
        bl: 4;
        sb: 5;
        nt: 6;
        iv: 7;
    };
    CP24Time2a: CP24TIME2A;
};

type NVA_QDS_CP56Time2a = unit {
    info_obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    NVA: uint16;
    qds: bitfield(8) {
        ov: 0;
        bl: 4;
        sb: 5;
        nt: 6;
        iv: 7;
    };
    CP56Time2a: CP56TIME2A;
};

type NVA_QDS_CP24Time2a = unit {
    info_obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    NVA: uint16;
    qds: bitfield(8) {
        ov: 0;
        bl: 4;
        sb: 5;
        nt: 6;
        iv: 7;
    };
    CP24Time2a: CP24TIME2A;
};

type SVA_QDS_CP56Time2a = unit {
    info_obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    SVA: uint16;
    qds: bitfield(8) {
        ov: 0;
        bl: 4;
        sb: 5;
        nt: 6;
        iv: 7;
    };
    CP56Time2a: CP56TIME2A;
};

type SVA_QDS_CP24Time2a = unit {
    info_obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    SVA: uint16;
    qds: bitfield(8) {
        ov: 0;
        bl: 4;
        sb: 5;
        nt: 6;
        iv: 7;
    };
    CP24Time2a: CP24TIME2A;
};

type T_QDS = unit {
    : bitfield(8) {
        ov: 0;
        # TODO:
        # : 1..3 = 0;
        bl: 4;
        sb: 5;
        nt: 6;
        iv: 7;
    };
};

type IEEE_754_QDS_CP56Time2a = unit {
    info_obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    # FIXME: Should be short floating point.
    value: uint32;
    qds: T_QDS;
    btt: CP56TIME2A;
};

type IEEE_754_QDS_CP24Time2a = unit {
    info_obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    value: uint32;
    qds: bitfield(8) {
        ov: 0;
        bl: 4;
        sb: 5;
        nt: 6;
        iv: 7;
    };
    CP24Time2a: CP24TIME2A;
};

type Read_Command = unit {
    info_obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
};

type QRP = unit {
    info_obj_addr: bytes &size=3 &convert=$$.to_uint(spicy::ByteOrder::Little);
    raw_data: uint8;
};

type Ctrl_i = unit(inout apdu: Apdu) {
    on %error { self.backtrack(); }

    : bitfield(32) {
      tag: 0 = 0;
      ssn: 1..15;
      unused: 16; # = 0
      rsn: 17..31;
    };

    on %done {
        apdu.format = Format::I;
    }
};

type Ctrl_s = unit(inout apdu: Apdu) {
    on %error { self.backtrack(); }

    : bitfield(32) {
      tag: 0..1 = 1;
      unused: 2..16; # = 0
      rsn: 17..31;
    };

    on %done {
        apdu.format = Format::S;
    }
};

type Ctrl_u = unit(inout apdu: Apdu) {
    on %error { self.backtrack(); }

    : bitfield(32) {
      tag: 0..1 = 3;
      startdt: 2..3;
      stopdt: 4..5;
      testfr: 6..7;
      zeroes: 8..31; # = 0
    };

    on %done {
        apdu.format = Format::U;
    }
};

type Raw = unit(tid: TypeID, nbytes: uint8) {
    data: bytes &size=(nbytes) &convert=spicy::bytes_to_hexstring($$);

    on %init {
        self.type_id = tid;
    }

    var type_id: TypeID = tid;
};

type AsduIdent = unit {
   type_id: uint8 &convert=TypeID($$);
    : bitfield (8) {
        nobj: 0..6;
        sq: 7;
    };
    : bitfield (8) {
        cause_of_transmission: 0..5 &convert=COT($$);
        negative: 6;
        test: 7;
    };
    originator_address: uint8;
    common_address: uint16;
};

type AsduIO = unit(apdu: Apdu, id: AsduIdent) {
    switch (id.type_id) {
        TypeID::M_SP_NA_1 -> m_sp_na_1: M_SP_NA_1_io()[id.nobj];
        TypeID::M_SP_TA_1 -> m_sp_ta_1: M_SP_TA_1_io()[id.nobj];
        TypeID::M_DP_NA_1 -> m_dp_na_1: M_DP_NA_1_io()[id.nobj];
        TypeID::M_DP_TA_1 -> m_dp_ta_1: M_DP_TA_1_io()[id.nobj];
        TypeID::M_ST_NA_1 -> m_st_na_1: M_ST_NA_1_io()[id.nobj];
        TypeID::M_ST_TA_1 -> m_st_ta_1: M_ST_TA_1_io()[id.nobj];
        TypeID::M_DP_TB_1 -> m_dp_tb_1: M_DP_TB_1_io()[id.nobj];
        TypeID::M_ME_NC_1 -> m_me_nc_1: M_ME_NC_1_io()[id.nobj];
        TypeID::M_SP_TB_1 -> m_sp_tb_1: M_SP_TB_1_io()[id.nobj];
        TypeID::C_SC_NA_1 -> c_sc_na_1: C_SC_NA_1_io()[id.nobj];
        TypeID::C_DC_NA_1 -> c_dc_na_1: C_DC_NA_1_io()[id.nobj];
        TypeID::C_RC_NA_1 -> c_rc_na_1: C_RC_NA_1_io()[id.nobj];
        TypeID::C_SE_NA_1 -> c_se_na_1: C_SE_NA_1_io()[id.nobj];
        TypeID::C_SE_NB_1 -> c_se_nb_1: C_SE_NB_1_io()[id.nobj];
        TypeID::C_SE_NC_1 -> c_se_nc_1: C_SE_NC_1_io()[id.nobj];
        TypeID::C_BO_NA_1 -> c_bo_na_1: C_BO_NA_1_io()[id.nobj];
        TypeID::C_SC_TA_1 -> c_sc_ta_1: C_SC_TA_1_io()[id.nobj];
        TypeID::C_DC_TA_1 -> c_dc_ta_1: C_DC_TA_1_io()[id.nobj];
        TypeID::C_RC_TA_1 -> c_rc_ta_1: C_RC_TA_1_io()[id.nobj];
        TypeID::C_SE_TA_1 -> c_se_ta_1: C_SE_TA_1_io()[id.nobj];
        TypeID::C_SE_TC_1 -> c_se_tc_1: C_SE_TC_1_io()[id.nobj];
        TypeID::C_BO_TA_1 -> c_bo_ta_1: C_BO_TA_1_io()[id.nobj];
        TypeID::M_EI_NA_1 -> m_ei_na_1: M_EI_NA_1_io()[id.nobj];
        TypeID::C_IC_NA_1 -> c_ic_na_1: C_IC_NA_1_io()[id.nobj];
        TypeID::M_BO_NA_1 -> bsi_qds: BSI_QDS()[id.nobj];
        TypeID::M_BO_TA_1 -> bsi_qds_CP24Time2a: BSI_QDS_CP24Time2a()[id.nobj];
        TypeID::M_ME_NA_1 -> nva_qds: NVA_QDS()[id.nobj];
        TypeID::M_ME_TA_1 -> nva_qds_CP24Time2a: NVA_QDS_CP24Time2a()[id.nobj];
        TypeID::M_ME_NB_1 -> sva_qds: SVA_QDS()[id.nobj];
        TypeID::M_ME_TB_1 -> sva_qds_CP24Time2a: SVA_QDS_CP24Time2a()[id.nobj];
        TypeID::M_ME_TC_1 -> ieee_754_qds_CP24Time2a: IEEE_754_QDS_CP24Time2a()[id.nobj];
        TypeID::M_ST_TB_1 -> vti_qds_CP56Time2a: VTI_QDS_CP56Time2a()[id.nobj];
        TypeID::M_BO_TB_1 -> bsi_qds_CP56Time2a: BSI_QDS_CP56Time2a()[id.nobj];
        TypeID::M_ME_TD_1 -> nva_qds_CP56Time2a: NVA_QDS_CP56Time2a()[id.nobj];
        TypeID::M_ME_TE_1 -> sva_qds_CP56Time2a: SVA_QDS_CP56Time2a()[id.nobj];
        TypeID::M_ME_TF_1 -> ieee_754_qds_CP56Time2a: IEEE_754_QDS_CP56Time2a()[id.nobj];
        TypeID::C_RD_NA_1 -> read_command: Read_Command()[id.nobj];
        TypeID::C_RP_NA_1 -> qrp: QRP()[id.nobj];
        * -> raw: Raw(id.type_id, apdu.len - 40);
    };
};

type Asdu = unit(apdu: Apdu) {
    id: AsduIdent;
    io: AsduIO(apdu, self.id);
};

public type Apdus = unit {
    %port = 2404/tcp &originator;
    : (Apdu &synchronize)[];
};

public type Apdu = unit {
    : int8(0x68);
    len: uint8 {
        if ($$ < 4) reject;
    }

    # We cannot set self.format in unit hooks here because they are
    # executed even in case of backtracing, so we must fall back to
    # passing self to subunits and setting the value there.
    ctrl_i: Ctrl_i(self) if (4 < self.len);
    ctrl_s: Ctrl_s(self) &try if (4 == self.len);
    ctrl_u: Ctrl_u(self) &try if (4 == self.len);

    # FIXME: Check that the size of information object is (len - 4).
    : Asdu(self) if (Format::I == self.format);

    var format: Format;

    on %done { spicy::accept_input(); }
};

function SIQ_rec(siq: SIQ): tuple<spi: bool, bl: bool, sb: bool, nt: bool, iv: bool>
{
    return (siq.spi == 1,
            siq.bl == 1,
            siq.sb == 1,
            siq.nt == 1,
            siq.iv == 1);
}

function DIQ_rec(diq: DIQ): tuple<dpi: uint8, bl: bool, sb: bool, nt: bool, iv: bool>
{
    return (diq.dpi,
            diq.bl == 1,
            diq.sb == 1,
            diq.nt == 1,
            diq.iv == 1);
}

function QDS_rec(qds: QDS): tuple<ov: bool, bl: bool, sb: bool, nt: bool, iv: bool>
{
    return (qds.ov == 1,
            qds.bl == 1,
            qds.sb == 1,
            qds.nt == 1,
            qds.iv == 1);
}

function CP56Time2a_rec(tt: CP56Time2a):
    tuple<ms: uint16, minute: uint8, iv: bool, hour: uint8, su: bool, day: uint8, dow: uint8, month: uint8, year: uint8>
{
    return (tt.ms, tt.minute, tt.iv == 1, tt.hour, tt.su == 1, tt.day, tt.dow, tt.month, tt.year);
}

function CP24Time2a_rec(tt: CP24Time2a):
    tuple<ms: uint16, minute: uint8,>
{
    return (tt.ms, tt.minute);
}

public function M_SP_NA_1_rec(io: M_SP_NA_1_io):
    tuple<uint64, tuple<spi: bool, bl: bool, sb: bool, nt: bool, iv: bool>>
{
    return (io.obj_addr, SIQ_rec(io.siq));
}

public function M_SP_TA_1_rec(io: M_SP_TA_1_io):
    tuple<uint64,
          tuple<spi: bool, bl: bool, sb: bool, nt: bool, iv: bool>,
          tuple<ms: uint16, minute: uint8>>
{
    return (io.obj_addr, SIQ_rec(io.siq), CP24Time2a_rec(io.tt));
}

public function M_DP_NA_1_rec(io: M_DP_NA_1_io):
    tuple<uint64, tuple<dpi: uint8, bl: bool, sb: bool, nt: bool, iv: bool>>
{
    return (io.obj_addr, DIQ_rec(io.diq));
}

public function M_DP_TA_1_rec(io: M_DP_TA_1_io):
    tuple<uint64,
          tuple<dpi: uint8, bl: bool, sb: bool, nt: bool, iv: bool>,
          tuple<ms: uint16, minute: uint8>>
{
    return (io.obj_addr, DIQ_rec(io.diq), CP24Time2a_rec(io.tt));
}

public function M_ST_NA_1_rec(io: M_ST_NA_1_io):
    tuple<uint64, vti: uint8, tuple<ov: bool, bl: bool, sb: bool, nt: bool, iv: bool>>
{
    return (io.obj_addr, io.vti, QDS_rec(io.qds));
}

public function M_ST_TA_1_rec(io: M_ST_TA_1_io):
    tuple<uint64, vti: uint8,
          tuple<ov: bool, bl: bool, sb: bool, nt: bool, iv: bool>,
          tuple<ms: uint16, minute: uint8>>
{
    return (io.obj_addr, io.vti, QDS_rec(io.qds), CP24Time2a_rec(io.tt));
}

public function M_ME_NC_1_rec(io: M_ME_NC_1_io):
    tuple<uint64, r32: real, tuple<ov: bool, bl: bool, sb: bool, nt: bool, iv: bool>>
{
    return (io.obj_addr, io.r32, QDS_rec(io.qds));
}

public function M_SP_TB_1_rec(io: M_SP_TB_1_io):
    tuple<uint64,
          tuple<spi: bool, bl: bool, sb: bool, nt: bool, iv: bool>,
          tuple<ms: uint16, minute: uint8, iv: bool, hour: uint8, su: bool, day: uint8, dow: uint8, month: uint8, year: uint8>>
{
    return (io.obj_addr, SIQ_rec(io.siq), CP56Time2a_rec(io.tt));
}

public function M_DP_TB_1_rec(io: M_DP_TB_1_io):
    tuple<uint64,
          tuple<dpi: uint8, bl: bool, sb: bool, nt: bool, iv: bool>,
          tuple<ms: uint16, minute: uint8, iv: bool, hour: uint8, su: bool, day: uint8, dow: uint8, month: uint8, year: uint8>>
{
    return (io.obj_addr, DIQ_rec(io.diq), CP56Time2a_rec(io.tt));
}

public function C_IC_NA_1_rec(io: C_IC_NA_1_io):
    tuple<uint64, uint8>
{
    return (io.obj_addr, io.qoi);
}

public function C_SC_NA_1_rec(io: C_SC_NA_1_io):
    tuple<uint64, tuple<scs: bool, qu: uint8, se: bool>>
{
    return (io.obj_addr, (io.sco.scs == 1, io.sco.qu, io.sco.se == 1));
}

public function C_DC_NA_1_rec(io: C_DC_NA_1_io):
    tuple<uint64, tuple<dcs: uint8, qu: uint8, se: bool>>
{
    return (io.obj_addr, (io.dco.dcs, io.dco.qu, io.dco.se == 1));
}

public function C_RC_NA_1_rec(io: C_RC_NA_1_io):
    tuple<uint64, tuple<rcs: uint8, qu: uint8, se: bool>>
{
    return (io.obj_addr, (io.rco.rcs, io.rco.qu, io.rco.se == 1));
}

public function C_SE_NA_1_rec(io: C_SE_NA_1_io):
    tuple<uint64, nva: uint16, tuple<ql: uint8, se: bool>>
{
    return (io.obj_addr, io.nva, (io.qos.ql, io.qos.se == 1));
}

public function C_SE_NB_1_rec(io: C_SE_NB_1_io):
    tuple<uint64, sva: uint16, tuple<ql: uint8, se: bool>>
{
    return (io.obj_addr, io.sva, (io.qos.ql, io.qos.se == 1));
}

public function C_SE_NC_1_rec(io: C_SE_NC_1_io):
    tuple<uint64, r32: real, tuple<ql: uint8, se: bool>>
{
    return (io.obj_addr, io.r32, (io.qos.ql, io.qos.se == 1));
}

public function C_BO_NA_1_rec(io: C_BO_NA_1_io):
    tuple<uint64, bsi: uint32>
{
    return (io.obj_addr, io.bsi);
}

public function C_SC_TA_1_rec(io: C_SC_TA_1_io):
    tuple<uint64, scs: bool, qu: uint8, se: bool,
          tuple<ms: uint16, minute: uint8, iv: bool, hour: uint8, su: bool, day: uint8, dow: uint8, month: uint8, year: uint8>>
{
    return (io.obj_addr, io.sco.scs == 1, io.sco.qu, io.sco.se == 1,
            CP56Time2a_rec(io.tt));
}

public function C_DC_TA_1_rec(io: C_DC_TA_1_io):
    tuple<uint64, tuple<dcs: uint8, qu: uint8, se: bool>,
          tuple<ms: uint16, minute: uint8, iv: bool, hour: uint8, su: bool, day: uint8, dow: uint8, month: uint8, year: uint8>>
{
    return (io.obj_addr,
            (io.dco.dcs, io.dco.qu, io.dco.se == 1),
            CP56Time2a_rec(io.tt));
}

public function C_RC_TA_1_rec(io: C_RC_TA_1_io):
    tuple<uint64, tuple<rcs: uint8, qu: uint8, se: bool>,
          tuple<ms: uint16, minute: uint8, iv: bool, hour: uint8, su: bool, day: uint8, dow: uint8, month: uint8, year: uint8>>
{
    return (io.obj_addr,
            (io.rco.rcs, io.rco.qu, io.rco.se == 1),
            CP56Time2a_rec(io.tt));
}

public function C_SE_TA_1_rec(io: C_SE_TA_1_io):
    tuple<uint64, uint16, tuple<ql: uint8, se: bool>,
          tuple<ms: uint16, minute: uint8, iv: bool, hour: uint8, su: bool, day: uint8, dow: uint8, month: uint8, year: uint8>>
{
    return (io.obj_addr,
            io.nva,
            (io.qos.ql, io.qos.se == 1),
            CP56Time2a_rec(io.tt));
}

public function C_SE_TC_1_rec(io: C_SE_TC_1_io):
    tuple<uint64, real, tuple<ql: uint8, se: bool>,
          tuple<ms: uint16, minute: uint8, iv: bool, hour: uint8, su: bool, day: uint8, dow: uint8, month: uint8, year: uint8>>
{
    return (io.obj_addr,
            io.r32,
            (io.qos.ql, io.qos.se == 1),
            CP56Time2a_rec(io.tt));
}

public function C_BO_TA_1_rec(io: C_BO_TA_1_io):
    tuple<uint64, uint32,
          tuple<ms: uint16, minute: uint8, iv: bool, hour: uint8, su: bool, day: uint8, dow: uint8, month: uint8, year: uint8>>
{
    return (io.obj_addr, io.bsi, CP56Time2a_rec(io.tt));
}

public function M_EI_NA_1_rec(io: M_EI_NA_1_io):
    tuple<uint64, coi: uint8, lpc: bool>
{
    return (io.obj_addr, io.coi, io.lpc == 1);
}

public function SVA_QDS_ret (asdu: SVA_QDS) :tuple<uint64, uint64, uint64, tuple<ov: uint8, bl: uint8, sb: uint8, nt: uint8, iv: uint8>> {
    local temp_ov = asdu.qds.ov;
    local temp_bl = asdu.qds.bl;
    local temp_sb = asdu.qds.sb;
    local temp_nt = asdu.qds.nt;
    local temp_iv = asdu.qds.iv;

    local qds_tuple = (temp_ov, temp_bl, temp_sb, temp_nt, temp_iv);

    return (0, asdu.info_obj_addr, asdu.SVA, qds_tuple);
}

public function VTI_QDS_CP56Time2a_ret (asdu: VTI_QDS_CP56Time2a): tuple<uint64, uint64, uint8, tuple<ov: uint8, bl: uint8, sb: uint8, nt: uint8, iv: uint8>, CP56TIME2A> {
    local temp_ov = asdu.qds.ov;
    local temp_bl = asdu.qds.bl;
    local temp_sb = asdu.qds.sb;
    local temp_nt = asdu.qds.nt;
    local temp_iv = asdu.qds.iv;

    local qds_tuple = (temp_ov, temp_bl, temp_sb, temp_nt, temp_iv);

    return (0, asdu.info_obj_addr, asdu.value, qds_tuple, asdu.CP56Time2a);
}

public function BSI_QDS_ret (asdu: BSI_QDS): tuple<uint64, uint64, uint64, tuple<ov: uint8, bl: uint8, sb: uint8, nt: uint8, iv: uint8>> {
    local temp_ov = asdu.qds.ov;
    local temp_bl = asdu.qds.bl;
    local temp_sb = asdu.qds.sb;
    local temp_nt = asdu.qds.nt;
    local temp_iv = asdu.qds.iv;

    local qds_tuple = (temp_ov, temp_bl, temp_sb, temp_nt, temp_iv);

    return (0, asdu.info_obj_addr, asdu.bsi, qds_tuple);
}

public function BSI_QDS_CP56Time2a_ret (asdu: BSI_QDS_CP56Time2a): tuple<uint64, uint64, uint64, tuple<ov: uint8, bl: uint8, sb: uint8, nt: uint8, iv: uint8>, CP56TIME2A> {
    local temp_ov = asdu.qds.ov;
    local temp_bl = asdu.qds.bl;
    local temp_sb = asdu.qds.sb;
    local temp_nt = asdu.qds.nt;
    local temp_iv = asdu.qds.iv;

    local qds_tuple = (temp_ov, temp_bl, temp_sb, temp_nt, temp_iv);

    return (0, asdu.info_obj_addr, asdu.bsi, qds_tuple, asdu.CP56Time2a);
}

public function BSI_QDS_CP24Time2a_ret (asdu: BSI_QDS_CP24Time2a): tuple<uint64, uint64, uint64, tuple<ov: uint8, bl: uint8, sb: uint8, nt: uint8, iv: uint8>, CP24TIME2A> {

    local temp_ov = asdu.qds.ov;
    local temp_bl = asdu.qds.bl;
    local temp_sb = asdu.qds.sb;
    local temp_nt = asdu.qds.nt;
    local temp_iv = asdu.qds.iv;

    local qds_tuple = (temp_ov, temp_bl, temp_sb, temp_nt, temp_iv);

    return (0, asdu.info_obj_addr, asdu.bsi, qds_tuple, asdu.CP24Time2a);
}

public function NVA_QDS_CP56Time2a_ret (asdu: NVA_QDS_CP56Time2a): tuple<uint64, uint64, uint64, tuple<ov: uint8, bl: uint8, sb: uint8, nt: uint8, iv: uint8>, CP56TIME2A> {
    # local temp_ov = asdu.qds.ov;
    # local temp_bl = asdu.qds.bl;
    # local temp_sb = asdu.qds.sb;
    # local temp_nt = asdu.qds.nt;
    # local temp_iv = asdu.qds.iv;

    local qds_tuple = (asdu.qds.ov, asdu.qds.bl, asdu.qds.sb, asdu.qds.nt, asdu.qds.iv);

    return (0, asdu.info_obj_addr, asdu.NVA, qds_tuple, asdu.CP56Time2a);
}

public function NVA_QDS_CP24Time2a_ret (asdu: NVA_QDS_CP24Time2a): tuple<uint64, uint64, uint64, tuple<ov: uint8, bl: uint8, sb: uint8, nt: uint8, iv: uint8>, CP24TIME2A> {
    local temp_ov = asdu.qds.ov;
    local temp_bl = asdu.qds.bl;
    local temp_sb = asdu.qds.sb;
    local temp_nt = asdu.qds.nt;
    local temp_iv = asdu.qds.iv;

    local qds_tuple = (temp_ov, temp_bl, temp_sb, temp_nt, temp_iv);

    return (0, asdu.info_obj_addr, asdu.NVA, qds_tuple, asdu.CP24Time2a);
}

public function SVA_QDS_CP56Time2a_ret (asdu: SVA_QDS_CP56Time2a): tuple<uint64, uint64, uint64, tuple<ov: uint8, bl: uint8, sb: uint8, nt: uint8, iv: uint8>, CP56TIME2A> {
    local temp_ov = asdu.qds.ov;
    local temp_bl = asdu.qds.bl;
    local temp_sb = asdu.qds.sb;
    local temp_nt = asdu.qds.nt;
    local temp_iv = asdu.qds.iv;

    local qds_tuple = (temp_ov, temp_bl, temp_sb, temp_nt, temp_iv);

    return (0, asdu.info_obj_addr, asdu.SVA, qds_tuple, asdu.CP56Time2a);
}

public function SVA_QDS_CP24Time2a_ret (asdu: SVA_QDS_CP24Time2a): tuple<uint64, uint64, uint64, tuple<ov: uint8, bl: uint8, sb: uint8, nt: uint8, iv: uint8>, CP24TIME2A> {
    local temp_ov = asdu.qds.ov;
    local temp_bl = asdu.qds.bl;
    local temp_sb = asdu.qds.sb;
    local temp_nt = asdu.qds.nt;
    local temp_iv = asdu.qds.iv;

    local qds_tuple = (temp_ov, temp_bl, temp_sb, temp_nt, temp_iv);

    return (0, asdu.info_obj_addr, asdu.SVA, qds_tuple, asdu.CP24Time2a);
}

public function IEEE_754_QDS_CP24Time2a_ret (asdu: IEEE_754_QDS_CP24Time2a): tuple<uint64, uint64, uint64, tuple<ov: uint8, bl: uint8, sb: uint8, nt: uint8, iv: uint8>, CP24TIME2A> {
    local temp_ov = asdu.qds.ov;
    local temp_bl = asdu.qds.bl;
    local temp_sb = asdu.qds.sb;
    local temp_nt = asdu.qds.nt;
    local temp_iv = asdu.qds.iv;

    local qds_tuple = (temp_ov, temp_bl, temp_sb, temp_nt, temp_iv);

    return (0, asdu.info_obj_addr, asdu.value, qds_tuple, asdu.CP24Time2a);
}

public function Read_Command_ret (asdu: Read_Command): tuple<uint64, uint64> {
    return (0, asdu.info_obj_addr);
}

public function QRP_ret (asdu: QRP): tuple<uint64, uint64, uint8> {
    return (0, asdu.info_obj_addr, asdu.raw_data);
}
