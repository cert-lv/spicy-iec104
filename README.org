#+title: Zeek IEC 104
#+options: toc:t

* Overview

~zeek-iec104~ is a Zeek plugin written using
[[https://docs.zeek.org/projects/spicy/en/latest/][Spicy]] for parsing and
logging fields used by the IEC 104 protocol.

* Installation

To build and install the parser into Zeek the following can be used:

#+begin_src sh
  cmake . && make install
#+end_src

After successful installation the following command:

#+begin_src sh
zeek -NN | grep IEC104
#+end_src

should have output similar to this:

#+begin_example
    [Analyzer] spicy_iec104 (ANALYZER_SPICY_IEC104, enabled)
#+end_example

* Implementation

The plugin is implemented using following files:

 - ~analyzer/zeek_iec104.spicy~ :: Spicy protocol analyzer.
 - ~analyzer/iec104.evt~ :: Event descriptions for Zeek integration.
 - ~scripts/iec104.zeek~ :: Zeek side definitions of structures exported from
   Spicy.
 - ~scripts/log.zeek~  ::  IEC 104 communication logging, see [[*Logging capabilities][Logging
   capabilities]] below.
 - ~scripts/print.zeek~ :: Support script that prints communication in
   sequential manner in a way that can be easily cross-checked with other
   tools (e.g., Wireshark).
 - ~scripts/seq.zeek~ :: APCI Send and Receive sequence number tracking.

** Supported information object types

The Spicy protocol analyzer and the corresponding Zeek code has support for
the following ASDU information object types:

| Reference   | TypeID | Implemented |
|-------------+--------+-------------|
| ~M_SP_NA_1~ |      1 | yes         |
| ~M_SP_TA_1~ |      2 | yes         |
| ~M_DP_NA_1~ |      3 | yes         |
| ~M_DP_TA_1~ |      4 | yes         |
| ~M_ST_NA_1~ |      5 | yes         |
| ~M_ST_TA_1~ |      6 | yes         |
| ~M_BO_NA_1~ |      7 | yes         |
| ~M_BO_TA_1~ |      8 | yes         |
| ~M_ME_NA_1~ |      9 | yes         |
| ~M_ME_TA_1~ |     10 | yes         |
| ~M_ME_NB_1~ |     11 | yes         |
| ~M_ME_TB_1~ |     12 | yes         |
| ~M_ME_NC_1~ |     13 | yes         |
| ~M_ME_TC_1~ |     14 | yes         |
| ~M_IT_NA_1~ |     15 |             |
| ~M_IT_TA_1~ |     16 |             |
| ~M_EP_TA_1~ |     17 |             |
| ~M_EP_TB_1~ |     18 |             |
| ~M_EP_TC_1~ |     19 |             |
| ~M_PS_NA_1~ |     20 |             |
| ~M_ME_ND_1~ |     21 |             |
| ~M_SP_TB_1~ |     30 | yes         |
| ~M_DP_TB_1~ |     31 | yes         |
| ~M_ST_TB_1~ |     32 | yes         |
| ~M_BO_TB_1~ |     33 | yes         |
| ~M_ME_TD_1~ |     34 | yes         |
| ~M_ME_TE_1~ |     35 | yes         |
| ~M_ME_TF_1~ |     36 | yes         |
| ~M_IT_TB_1~ |     37 |             |
| ~M_EP_TD_1~ |     38 |             |
| ~M_EP_TE_1~ |     39 |             |
| ~M_EP_TF_1~ |     40 |             |
| ~C_SC_NA_1~ |     45 | yes         |
| ~C_DC_NA_1~ |     46 | yes         |
| ~C_RC_NA_1~ |     47 | yes         |
| ~C_SE_NA_1~ |     48 | yes         |
| ~C_SE_NB_1~ |     49 | yes         |
| ~C_SE_NC_1~ |     50 | yes         |
| ~C_BO_NA_1~ |     51 | yes         |
| ~C_SC_TA_1~ |     58 | yes         |
| ~C_DC_TA_1~ |     59 | yes         |
| ~C_RC_TA_1~ |     60 | yes         |
| ~C_SE_TA_1~ |     61 | yes         |
| ~C_SE_TB_1~ |     62 |             |
| ~C_SE_TC_1~ |     63 | yes         |
| ~C_BO_TA_1~ |     64 | yes         |
| ~M_EI_NA_1~ |     70 | yes         |
| ~C_IC_NA_1~ |    100 | yes         |
| ~C_CI_NA_1~ |    101 |             |
| ~C_RD_NA_1~ |    102 | yes         |
| ~C_CS_NA_1~ |    103 |             |
| ~C_TS_NA_1~ |    104 |             |
| ~C_RP_NA_1~ |    105 | yes         |
| ~C_CD_NA_1~ |    106 |             |
| ~C_TS_TA_1~ |    107 |             |
| ~P_ME_NA_1~ |    110 |             |
| ~P_ME_NB_1~ |    111 |             |
| ~P_ME_NC_1~ |    112 |             |
| ~P_AC_NA_1~ |    113 |             |
| ~F_FR_NA_1~ |    120 |             |
| ~F_SR_NA_1~ |    121 |             |
| ~F_SC_NA_1~ |    122 |             |
| ~F_LS_NA_1~ |    123 |             |
| ~F_AF_NA_1~ |    124 |             |
| ~F_SG_NA_1~ |    125 |             |
| ~F_DR_TA_1~ |    126 |             |
| ~F_SC_NB_1~ |    127 |             |

* Logging capabilities

This plugin creates many log files, all of which start with a `iec104-`
prefix.  All logs have the following fields:

- ~ts~ :: Message timestamp.
- ~uid~ :: Zeek connection identifier.
- ~id.orig_h~ :: Connection originator host.
- ~id.orig_p~ :: Connection originator port.
- ~id.oesp_h~ :: Connection responding host.
- ~id.oesp_p~ :: Connection responding port.
- ~is_orig~ :: True if the message is from the connection originator.
- ~apdu~ :: APDU counter, increased for each APDU.  Useful for cross-linking
  data from different logs.

** iec104-apci_i.log

APCI I-Format message fields.  In addition to common fields has the following:

- ~ssn~ :: Send sequence number
- ~rsn~ :: Receive sequence number

ASDU fields are in [[*iec104-asdu_ident.log][iec104-asdu_ident.log]].

** iec104-apci_s.log

APCI S-Format message fields.  In addition to common fields has the following:

- ~rsn~ :: Receive sequence number

** iec104-apci_u.log

APCI U-Format message fields.  In addition to common fields has the following:

- ~startdt~ ::
- ~stopdt~ ::
- ~testfr~ ::

** iec104-asdu_ident.log

- ~ident.type_id~ :: Information object type ID (symbolic)
- ~ident.nobj~ :: Number of objects in ASDU
- ~ident.sq~ :: SQ flag
- ~ident.cot~ :: Cause of transmission (symbolic)
- ~ident.pn~ :: P/N (positive/negative) flag
- ~ident.test~ :: Test flag
- ~ident.originator_address~ :: Originator address
- ~ident.common_address~ :: Common address

** Information object type specific logs

Each ASDU information object type is logged in a separate log file with the
symbolic name of ASDU type ID in the file name, e.g., ~iec104-C_DC_NA_1.log~.
Each file has information object type specific fields (in addition to common
fields), not documented here at the moment.

** iec104-unk.log

Messages with unknown (vendor-specific) ASDU types.  In addition to common
fields has the following fields:

- ~type_id~ :: Symbolic name of the ASDU information object type ID
- ~type_id_code~ :: Numeric value of the ASDU information object type ID
- ~data~ :: Binary message data as a hex string

* Resources

- Wireshark IEC 104 Dissector:
  [[https://github.com/wireshark/wireshark/blob/master/epan/dissectors/packet-iec104.c]]

- Matou≈°ek, Petr. "Description and analysis of IEC 104 Protocol." Faculty of
  Information Technology, Brno University o Technology, Tech. Rep (2017).
  [[https://www.fit.vut.cz/research/publication/11570/.en]]

- [[https://infosys.beckhoff.com/content/1033/tf6500_tc3_iec60870_5_10x/984444939.html?id=6858453402777673110]]

** PCAPs

- The trace under [[file://testing/Traces/first/][testing/Traces/first]] has
  been acquired form
  [[https://github.com/automayt/ICS-pcap/blob/master/IEC%2060870/iec104/iec104.pcap]]

- The traces under the
  [[file://./testing/Traces/second/][testing/Traces/second]],
  [[file://./testing/Traces/third/][testing/Traces/third]] and
  [[file://./testing/Traces/fourth/][testing/Traces/fourth]] directories come
  from the "20200608_UOWM_IEC104_Dataset_mitm_drop" in: Panagiotis,
  Konstantinos, Thomas, Vasileios, & Panagiotis. (2022). IEC 60870-5-104
  Intrusion Detection Dataset [Data
  set]. [[https://doi.org/10.21227/fj7s-f281]] and
  [[https://zenodo.org/record/7108614#.ZFR6oJHML0o]]
